# Dual boot arch linux + win 11

## 基本系统安装：双启动windows和arch linux

笔记本出厂自带windows，保留windows的情况下加塞arch linux。官网下载安装
用的iso，一步步跟着提示走，有问题查arch wiki就差不多了。几个注意点：

 - 给linux留多一点分区。以后嫌多了缩小容易，嫌小了扩展难。我建议至少留
   个200G。如果犯了跟我一样的规划错误，可以参考[这篇](update_root_partition.md)来修正。
 - 给/boot也多留点。/boot是fat32，我至今没找到安全resize的办法。网上有
   些地方推荐的512只能说勉强够用，建议留干脆留几个G。
 - 装linux之前先在windows里登陆账户把机器关联上，确认一下账号上能找到
   recovery key，翻车大蓝屏的时候需要用。
 - 硬盘分区名称每台电脑不一样，注意修改
 - fdisk操作的时候看清楚，不要手滑把windows分区格式化了
 - 纸上记下每个分区号，若干重要地方需要用
 - 启动列表用edk2-shell来配置，往linux装的启动配置里加windows。跟着[这个视
   频](https://www.youtube.com/watch?v=QTVQpvSoSIA){:target="_blank"}可以无脑抄答案。
 - bitlocker很容易被触发，需要用recovery key来解锁进入windows。在win下面把encryption整个
   disable，可以解决一部分问题，但有时候还是莫名其妙windows的启动分区变为首选，直接跳过linux，
   需要重启进BIOS改。

劝退点

 - 双系统下面无法让dropbox管理共享分区，因为dropbox在win上不支持ext4，在linux上只支持ext4。
   这个本质问题是dropbox只能用native filesystem跟踪文件有没有更新，没法hack。
 - 系统启动依然没有很稳定地每次都进入linux boot menu，有时直接跳win，有时候蓝屏（bitlocker）。


## 基本工具

 - tree: 在终端进行树状文件浏览，辅助ls
 - nano: 对于不喜欢vim的人来说，这个在终端用很合适，我只要有terminal就
   会配置一个
 - less: 预览文件。arch linux连这个都不预装是我没想到的。。
 - emacs: 这几年emacs热度骤降，市场份额比vim低一个数量级，但org mode还是香。不想折腾的可以用下
   面给的基本配置。
 - tilix: 可以平铺窗口的终端
 - code: VS code的linux版
 - auto-cpufreq: 据说是省电小助手
```
sudo pacman -S auto-cpufreq
systemctl enable auto-cpufreq
systemctl start auto-cpufreq
```
 - darktable：照片编辑和管理。据说用过之后就不想用lightroom了
 - RawTherapee：也是照片编辑和管理，各有优点。
 - krita：替代photoshop
 - imagemagick；一系列处理图片的命令行。虽然听着反直觉，但是有些小东西
   还挺方便，比如terminal直接看图`display a.jpg`。批量给图片加边框也很
   方便。
 - yazi：鸭子。终端模式的文件管理器。
 - kwin：kde自带，适合只想用平铺式窗口管理的一部分功能，不想全盘切换的
   人。bspwm是另一个选项，也很多人用，就是需要多折腾一些。
 - conky：轻量级、可以显示在桌面上的系统监视器，有海量的配置可以直接抄。

## 配置git

 - 首先需要拿到access token。进入Settings -> Developer Settings ->
   Personal access tokens。我选择的是Personal access tokens (classic)
 - `git config --global credential.helper store`。再进行一次push/pull，
   需要密码的时候输入token，就存下来了。

## mkdocs

用mkdocs+github pages做个人网站，学习曲线比较平，适合不太想学新语言的。
按照github官网的教程设置个人网站，新建一个repo，然后根据mkdocs的[教
程
](https://www.mkdocs.org/user-guide/deploying-your-docs/){:target="_blank"}
来发布到github上。有些小改动：

 - 如果用miniconda装的python，有可能出现系统自带python
找不到pip包的报错，则需要进入`/usr/bin/mkdocs`修改python路径。
 - github上
的默认branch现在是main，需要修正命令为`mkdocs gh-deploy --config-file
<path>/mkdocs.yml --remote-branch main`。我把这个写到deploy.sh里，直接
跑.deploy.sh。

如果链接需要在浏览器开新tab，在链接结尾加上`{:target="_blank"}`。完整版本
是`[text](example.com){:target="_blank"}`

yaml里加上

```yaml
markdown_extensions:
  - def_list
  - pymdownx.tasklist:
      custom_checkbox: true
  - attr_list

plugins:
  - search
  - mkdocs-jupyter:
      execute: false
      include_requirejs: true
      custom_mathjax_url: "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/latest.js?config=TeX-AMS_CHTML-full,Safe"
```

## 配置文件

.emacs.d/init.el
```lisp
(tool-bar-mode -1)
(setq use-dialog-box t)
(setq use-file-dialog nil)
(setq-default frame-title-format '("%b  -  GNU Emacs"))

;; Hide the startup screen
(setq inhibit-startup-screen t)

(setq completion-ignore-case t)
(setq case-fold-search t)

;; case insensitive search
(setq read-file-name-completion-ignore-case t
      read-buffer-completion-ignore-case t
      completion-ignore-case t
      completion-category-defaults nil
      completion-category-overrides nil
      completion-styles '(basic))

(add-to-list 'load-path "~/.emacs.d/auto-dark/")
(require 'auto-dark)
(auto-dark-mode)
```
